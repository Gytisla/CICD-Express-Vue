version: '2.1'
orbs:
  docker: circleci/docker@2.0.3
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@1.3

jobs:
  create-small-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/install-aws-iam-authenticator:
          release-tag: ''
      - aws-eks/create-cluster:
          cluster-name: << parameters.cluster-name >>
          skip-kubectl-install: false
          verbose: 3
          node-type: t2.small
          nodes-max: 2
          ssh-access: false
          ssh-public-key: ''
          zones: 'us-east-1a,us-east-1b,us-east-1d'

  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-lb:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.yml
          resource-name: service/bluegreenlb

  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deployment.yml
          resource-name: deployment/express-eks-cluster

workflows:
  default:
    jobs:
      # STEP 1: Install hadolint? and lint Dockerfile
      # also lint express api?

      # STEP 2: build docker container from Dockerfile and pish to docker hub
      # - docker/publish:
      #     image: gytisl/express-eks
          # update-description: true

      # STEP 3: Create Kubernetes cluster
      - create-small-cluster:
          cluster-name: express-eks-cluster
      # - aws-eks/create-cluster:
      #     cluster-name: api-eks-${CIRCLE_WORKFLOW_ID:0:5}
      #     requires:
      #       - docker/publish

      # STEP 4: Test Kubernetes cluster
      - test-cluster:
          cluster-name: express-eks-cluster
          requires:
            - create-small-cluster
            # - aws-eks/create-cluster

      - create-lb:
          cluster-name: express-eks-cluster
          requires:
            - test-cluster

      # STEP 5: Create Kubernetes deployment
      - create-deployment:
          cluster-name: express-eks-cluster
          requires:
            - create-lb

      # STEP 6: Update container image
      - aws-eks/update-container-image:
          cluster-name: express-eks-cluster
          container-image-updates: 'express-eks=gytisl/express-eks:latest'
          requires:
            - create-deployment
          resource-name: deployment/express-eks
      # - aws-eks/update-container-image:
      #     cluster-name: api-eks-${CIRCLE_WORKFLOW_ID:0:5}
      #     container-image-updates: 'nginx=nginx:1.9.1'
      #     post-steps:
      #       - kubernetes/delete-resource:
      #           resource-names: nginx-deployment
      #           resource-types: deployment
      #           wait: true
      #     requires:
      #       - create-deployment
      #     resource-name: deployment/nginx-deployment

      # ADDITIONAL: Delete cluster, run on_fail later
      # - aws-eks/delete-cluster:
      #     cluster-name: api-eks-${CIRCLE_WORKFLOW_ID:0:5}
      #     requires:
      #       - create-deployment
