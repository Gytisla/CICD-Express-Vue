version: '2.1'

orbs:
  docker: circleci/docker@2.0.3
  aws-eks: circleci/aws-eks@2.1.2
  kubernetes: circleci/kubernetes@1.3

parameters:
  run_create_cluster:
    type: boolean
    default: true

jobs:
  lint-expressjs:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Lint expressjs
          command: |
            cd api/
            npm install
            npm run lint
  
  create-small-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - when:
          condition:
            equal: [ true, << pipeline.parameters.run_create_cluster >> ]
          steps:
            - aws-eks/install-aws-iam-authenticator:
                release-tag: ''
            - aws-eks/create-cluster:
                cluster-name: << parameters.cluster-name >>
                skip-kubectl-install: false
                verbose: 3
                node-type: t2.small
                nodes-max: 2
                ssh-access: false
                ssh-public-key: ''
                zones: 'us-east-1a,us-east-1b,us-east-1d'

  test-cluster:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get services
          name: Test cluster

  create-lb-service:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: service.yml
          resource-name: service/bluegreenlb

  create-deployment:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - checkout
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          install-kubectl: true
      - kubernetes/create-or-update-resource:
          resource-file-path: deployment.yml
          resource-name: deployment/express-eks-cluster

  get-pods:
    docker:
      - image: 'cimg/python:3.10'
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
    steps:
      - kubernetes/install
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
      - run:
          command: |
            kubectl get pods
          name: Get pods

workflows:
  default:
    jobs:
      # Lint expressjs app
      - lint-expressjs

      # Lint Dockerfile
      - docker/hadolint:
          dockerfiles: Dockerfile
          executor-class: medium

      # Build docker container from Dockerfile and pish to docker hub
      - docker/publish:
          image: gytisl/express-eks
          tag: latest
          requires:
            - lint-expressjs
            - docker/publish

      # Create Kubernetes cluster if run_create_cluster parameter is true
      - create-small-cluster:
          cluster-name: express-eks-cluster
          requires:
            - docker/publish

      # Test Kubernetes cluster
      - test-cluster:
          cluster-name: express-eks-cluster
          requires:
            - create-small-cluster

      # Create LB Service
      - create-lb-service:
          cluster-name: express-eks-cluster
          requires:
            - test-cluster

      # Create Kubernetes deployment
      - create-deployment:
          cluster-name: express-eks-cluster
          requires:
            - test-cluster
            - docker/publish

      # Update container image - rolling update
      - aws-eks/update-container-image:
          cluster-name: express-eks-cluster
          container-image-updates: 'express-eks=gytisl/express-eks:latest'
          resource-name: deployment/express-eks
          show-kubectl-command: true
          get-rollout-status: true
          watch-timeout: 5m
          requires:
            - create-deployment

      # Get Kubernetes pods
      - get-pods:
          cluster-name: express-eks-cluster
          requires:
            - aws-eks/update-container-image
